Riflessioni sui campi dati dell'utente:
- Patente: non è obbligatoria (neanche a livello di requisiti imposti dal proponente). Effettivamente un utente potrebbe avere un auto che vorrebbe mettere a disposizione del sistema, ma non essere patentato. Piuttosto, implementarla come parte della gamification, premiando l'utente con punti o un badge per aver caricato la propria patente nel sistema. Riflettere sul volerla rendere "obbligatoria" alla prima prenotazione di un auto (se uno vuole guidare DEVE avere la patente, ma di fatto può essere l'utente che condivide l'auto a chiedere di vedere la patente dell'utente che noleggia, al momento della consegna delle chiavi)

- Nome utente: univoco (verifica della non presenza in database di un utente con lo stesso nickname), diventa chiave primaria in database per identificarlo univocamente, quindi non è modificabile. Accettato anche di un solo carattere, numeri o lettere che siano, ma non caratteri speciali. Se il nome utente è di più di un carattere, invece, posso accettare anche caratteri speciali da questo insieme { . , - , _ }

- Email: univoca MA MODIFICABILE. Se l'utente in fase di registrazione inserisce una mail che risulta già associata ad un altro account, l'applicazione restituisce un errore. Se l'utente loggato va a modificare il campo email del suo profilo e inserisce una mail che risulta già associata ad un altro account, l'applicazione restituisce un errore. Ciò nonostante, l'utente può cambiarla con un'altra se valida, quindi non può essere usata come chiave univoca di identificazione (perciò la scelta a tale scopo ricade sul nome utente)

- Inserimento e modifica di campi: poichè l'inserimento di un campo è, di fatto, la modifica di un campo vuoto, possiamo considerare l'inserimento come modifica e non è necessario gestirlo come caso separato (che richiederebbe l'uso di interfacce/pulsanti differenti per i due casi)

- L'ordine di risoluzione dei campi e visualizzazione di relativi eventuali errori non è formalizzata nello studio dei casi d'uso: in fase di progettazione riflettere su come vogliamo gestirli. In particolare si è avanzata la proposta di risolvere i campi in ordine di visualizzazione: il primo che incontra un errore ferma l'analisi dei campi e visualizza il tipo di errore. In questo modo solo quando tutti i campi avranno un contenuto corretto e valido il processo andrà a buon fine.